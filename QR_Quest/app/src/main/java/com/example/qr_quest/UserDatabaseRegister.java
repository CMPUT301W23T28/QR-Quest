package com.example.qr_quest;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Build;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QuerySnapshot;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class UserDatabaseRegister extends AppCompatActivity {

    FirebaseFirestore db = FirebaseFirestore.getInstance();
    CollectionReference usersRef = db.collection("Users");

    private SharedPreferences sharedPreferences;
    private Context context;
    private MainActivity activity;
    private String username;

    public UserDatabaseRegister(MainActivity activity, SharedPreferences sharedPreferences,
                                Context context, String username){
        this.sharedPreferences = sharedPreferences;
        this.context = context;
        this.activity = activity;
        this.username = username;

    }

    void register_check() {
        // Check if the username is already taken by querying the "Users" collection
        usersRef.whereEqualTo("name", username).get().addOnCompleteListener(task -> {
            if (task.isSuccessful()) {
                // Check if any documents were returned by the query
                if (!task.getResult().isEmpty()) {
                    // If there are any documents with the same username, show an error message and return
                    Toast.makeText(context, "Username is already taken", Toast.LENGTH_SHORT).show();
                    return;
                }

                // If there are no documents with the same username, create a new document in the "Users" collection
                Map<String, Object> user = new HashMap<>();
                user.put("name", username);
                user.put("score", 0);
                user.put("num_qr_codes", 0);
                user.put("scanned_qr_codes", new ArrayList<>());
                usersRef.add(user).addOnSuccessListener(documentReference -> add_user()).addOnFailureListener(e -> {
                    // If there was an error adding the document to the "Users" collection, show an error message
                    Toast.makeText(context, "User registration failed", Toast.LENGTH_SHORT).show();
                });
            } else {
                // If there was an error querying the "Users" collection, show an error message
                Toast.makeText(context, "User validation failed", Toast.LENGTH_SHORT).show();
            }
        });
    }

    void add_user(){
        // If the document was successfully added to the "Users" collection, show a success message
        Toast.makeText(context, "User registration successful", Toast.LENGTH_SHORT).show();

        // Generate a unique ID for the device using a combination of the device's serial number and a random UUID
        String deviceId = Build.SERIAL + UUID.randomUUID().toString();

        // Save the device ID to the device's shared preferences
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putString("deviceId", deviceId);
        editor.apply();

        // Save the user's username to the device's shared preferences
        editor.putString("username", username);
        editor.apply();

        /*
        //Get a reference to the "users" node in the Firebase database
        DatabaseReference usersRef = FirebaseDatabase.getInstance().getReference("users");

        // Create a new user object with the desired fields
        User newUser = new User(username, score, numQRCodes, qrCodes, email, firstName, lastName, phoneNumber);

        // Get a new unique ID for the user using the push() method
        String userId = usersRef.push().getKey();

        // Upload the new user data to the database under the unique user ID
        usersRef.child(userId).setValue(newUser);
        This code gets a reference to the "users" node in your Firebase database, creates a new User object with the desired fields, generates a unique ID for the new user using the push() method, and then uploads the user data to the database using the setValue() method. The user data is stored under the unique ID generated by push(), which allows you to easily retrieve the user data later using the ID.
        * */

        Intent intent = new Intent(activity, home.class);
        startActivity(intent);
    }
}
